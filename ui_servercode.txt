library(shiny)
library(superml)
library(randomForest)
# use the below options code if you wish to increase the file input limit, in this example file input limit is increased from 5MB to 9MB
# options(shiny.maxRequestSize = 9*1024^2)



shinyServer(function(input,output){
  
  # This reactive function will take the inputs from UI.R and use them for read.table() to read the data from the file. It returns the dataset in the form of a dataframe.
  # file$datapath -> gives the path of the file
  data <- reactive({
    file1 <- input$file
    if(is.null(file1)){return()}
    read.table(file=file1$datapath, sep=",",header = TRUE)
    
  })
  
  data1<-reactive({
    df<-data()
    categorical_columns<-c('Attrition', 'BusinessTravel', 'Department', 'EducationField', 'Gender',
                           'JobRole', 'MaritalStatus', 'Over18', 'OverTime')
    continous_columns<-c('Age', 'DailyRate', 'DistanceFromHome', 'Education', 'EmployeeCount',
                         'EmployeeNumber', 'EnvironmentSatisfaction', 'HourlyRate',
                         'JobInvolvement', 'JobLevel', 'JobSatisfaction', 'MonthlyIncome',
                         'MonthlyRate', 'NumCompaniesWorked', 'PercentSalaryHike',
                         'PerformanceRating', 'RelationshipSatisfaction', 'StandardHours',
                         'StockOptionLevel', 'TotalWorkingYears', 'TrainingTimesLastYear',
                         'WorkLifeBalance', 'YearsAtCompany', 'YearsInCurrentRole',
                         'YearsSinceLastPromotion', 'YearsWithCurrManager')
    lbl <- LabelEncoder$new()
    lbl$fit(df$BusinessTravel)
    df$BusinessTravel <- lbl$fit_transform(df$BusinessTravel)
    
    lb2 <- LabelEncoder$new()
    lb2$fit(df$Department)
    df$Department <- lb2$fit_transform(df$Department)
    
    lb3 <- LabelEncoder$new()
    lb3$fit(df$EducationField)
    df$EducationField <- lb3$fit_transform(df$EducationField)
    
    lb4 <- LabelEncoder$new()
    lb4$fit(df$Gender)
    df$Gender <- lb4$fit_transform(df$Gender)
    
    lb5 <- LabelEncoder$new()
    lb5$fit(df$JobRole)
    df$JobRole <- lb5$fit_transform(df$JobRole)
    
    lb6 <- LabelEncoder$new()
    lb6$fit(df$MaritalStatus)
    df$MaritalStatus <- lb6$fit_transform(df$MaritalStatus)
    
    lb7 <- LabelEncoder$new()
    lb7$fit(df$Over18)
    df$Over18 <- lb7$fit_transform(df$Over18)
    
    lb8 <- LabelEncoder$new()
    lb8$fit(df$OverTime)
    df$OverTime <- lb8$fit_transform(df$OverTime)
    
    lb9 <- LabelEncoder$new()
    lb9$fit(df$Attrition)
    df$Attrition <- lb9$fit_transform(df$Attrition)
    
    classifier_RF = randomForest(x = df[-2],
                                 y = df$Attrition,
                                 ntree = 500)
    
    y_pred = predict(classifier_RF, newdata = df[-2])
    
    prediction<-list()
    
    for (x in seq(1,length(y_pred))){
      if (y_pred[x]>0.5){
        prediction[x]<-"Yes"
      }
      else{
        prediction[x]<-"No"
      }
    }
    
    df1<-df[-2]
    df1$Predictions<-prediction
    
    df1
    
  })
  
  
  output$tb <- renderTable({
    data<-data()
    data<-data[-2]
    data
  })
  
  output$wt<- renderTable({
    data1()
  })
})